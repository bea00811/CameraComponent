import React, { useState, useRef, useEffect } from 'react';
import './Camera.css';

const CameraApp: React.FC = () => {
  const [isCameraOpen, setIsCameraOpen] = useState<boolean>(false);
  const [error, setError] = useState<string>('');
  const [isFrontCamera, setIsFrontCamera] = useState<boolean>(true); // true - —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è, false - –∑–∞–¥–Ω—è—è
  const videoRef = useRef<HTMLVideoElement>(null);
  const streamRef = useRef<MediaStream | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–º–µ—Ä—ã
  const openCamera = async (useFrontCamera: boolean = true): Promise<void> => {
    try {
      setError('');
      
      if (!navigator.mediaDevices?.getUserMedia) {
        throw new Error('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–º–µ—Ä—É');
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (streamRef.current) {
        streamRef.current.getTracks().forEach(track => track.stop());
      }

      const constraints: MediaStreamConstraints = {
        video: {
          facingMode: useFrontCamera ? 'user' : 'environment', // 'user' - —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è, 'environment' - –∑–∞–¥–Ω—è—è
          width: { ideal: 1280 },
          height: { ideal: 720 }
        }
      };

      const stream = await navigator.mediaDevices.getUserMedia(constraints);
      
      streamRef.current = stream;
      setIsCameraOpen(true);
      setIsFrontCamera(useFrontCamera);
      
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        videoRef.current.onloadedmetadata = () => {
          videoRef.current?.play().catch(e => {
            setError('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ');
          });
        };
      }

    } catch (error) {
      setError(`–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
  const switchCamera = async (): Promise<void> => {
    const newCameraMode = !isFrontCamera; // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é
    await openCamera(newCameraMode);
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
  const takeAndSavePhoto = (): void => {
    if (!videoRef.current) {
      setError('–ö–∞–º–µ—Ä–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞');
      return;
    }

    try {
      const video = videoRef.current;
      
      if (video.videoWidth === 0 || video.videoHeight === 0) {
        setError('–í–∏–¥–µ–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
        return;
      }

      const canvas = document.createElement('canvas');
      const context = canvas.getContext('2d');
      
      if (!context) {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç canvas');
        return;
      }

      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      
      // –ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã
      if (isFrontCamera) {
        context.translate(canvas.width, 0);
        context.scale(-1, 1);
      }
      
      context.drawImage(video, 0, 0, canvas.width, canvas.height);
      
      const photoDataUrl = canvas.toDataURL('image/jpeg', 0.9);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
      const link = document.createElement('a');
      link.href = photoDataUrl;
      link.download = `photo-${new Date().getTime()}.jpg`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      setError('');
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      closeCamera();
      
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ç–æ');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞–º–µ—Ä—ã
  const closeCamera = (): void => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
    }
    setIsCameraOpen(false);
    setError('');
  };

  // –û—á–∏—Å—Ç–∫–∞
  useEffect(() => {
    return () => {
      if (streamRef.current) {
        streamRef.current.getTracks().forEach(track => track.stop());
      }
    };
  }, []);

  return (
    <div className="camera-app">
      {!isCameraOpen && (
        <div className="camera-launch-screen">
          <button 
            className="open-selfie-btn" 
            onClick={() => openCamera(true)} // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω—É—é –∫–∞–º–µ—Ä—É
          >
            üì∏ –°–¥–µ–ª–∞—Ç—å —Å–µ–ª—Ñ–∏
          </button>
          {error && <div className="error-message">{error}</div>}
        </div>
      )}

      {isCameraOpen && (
        <div className="camera-interface">
          <video
            ref={videoRef}
            autoPlay
            playsInline
            muted
            className="camera-video"
            style={{ transform: isFrontCamera ? 'scaleX(-1)' : 'none' }} // –ó–µ—Ä–∫–∞–ª–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–ª—Ñ–∏
          />
          
          {error && (
            <div className="error-overlay">
              <div className="error-text">{error}</div>
              <button onClick={closeCamera} className="error-close-btn">
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          )}

          {!error && (
            <div className="camera-controls">
              {/* –ö–Ω–æ–ø–∫–∞ —Å—ä–µ–º–∫–∏ */}
              <button className="capture-btn" onClick={takeAndSavePhoto}>
                <div className="capture-circle"></div>
              </button>
              
              {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã */}
              <button 
                className="close-camera-btn"
                onClick={switchCamera}
              >
                {isFrontCamera ? 'üì∑' : 'üì±'} {/* –ò–∫–æ–Ω–∫–∞ –º–µ–Ω—è–µ—Ç—Å—è */}
              </button>
              
              {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
              <button className="close-camera-btn" onClick={closeCamera}>
                ‚úï
              </button> */}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default CameraApp;