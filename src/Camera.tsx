import React, { useState, useRef, useEffect } from 'react';
import './Camera.css';

const CameraApp: React.FC = () => {
  const [isCameraOpen, setIsCameraOpen] = useState<boolean>(false);
  const [capturedPhoto, setCapturedPhoto] = useState<string | null>(null);
  const videoRef = useRef<HTMLVideoElement>(null);
  const streamRef = useRef<MediaStream | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–µ–ª—Ñ–∏-–∫–∞–º–µ—Ä—ã
  const openSelfieCamera = async (): Promise<void> => {
    try {
      // –°—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
      const constraints: MediaStreamConstraints = {
        video: { 
          facingMode: 'user', // –§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞
          width: { ideal: 1920 },
          height: { ideal: 1080 }
        } as MediaTrackConstraints
      };

      const stream = await navigator.mediaDevices.getUserMedia(constraints);
      
      streamRef.current = stream;
      setIsCameraOpen(true);
      
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
      }

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
      if (/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
        try {
          if (document.documentElement.requestFullscreen) {
            await document.documentElement.requestFullscreen();
          }
        } catch (fullscreenError) {
          console.log('Fullscreen not supported');
        }
      }

    } catch (error) {
      console.error('Error opening camera:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
  const takePhoto = (): void => {
    if (!videoRef.current || !streamRef.current) return;

    const video = videoRef.current;
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    
    if (!context) return;

    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    
    // –ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–µ–ª—Ñ–∏
    context.translate(canvas.width, 0);
    context.scale(-1, 1);
    context.drawImage(video, 0, 0, canvas.width, canvas.height);
    
    const photoDataUrl = canvas.toDataURL('image/jpeg', 0.9);
    setCapturedPhoto(photoDataUrl);
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
  const savePhoto = (): void => {
    if (!capturedPhoto) return;
    
    const link = document.createElement('a');
    link.href = capturedPhoto;
    link.download = `selfie-${new Date().getTime()}.jpg`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    // –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É
    closeCamera();
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å–Ω—è—Ç—å —Ñ–æ—Ç–æ
  const retakePhoto = (): void => {
    setCapturedPhoto(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞–º–µ—Ä—ã
  const closeCamera = (): void => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
    }
    
    // –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if (document.fullscreenElement) {
      document.exitFullscreen();
    }
    
    setIsCameraOpen(false);
    setCapturedPhoto(null);
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è:
    // openSelfieCamera();
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (streamRef.current) {
        streamRef.current.getTracks().forEach(track => track.stop());
      }
    };
  }, []);

  return (
    <div className="camera-app">
      {/* –ï—Å–ª–∏ –∫–∞–º–µ—Ä–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É */}
      {!isCameraOpen && (
        <div className="camera-launch-screen">
          <button 
            className="open-selfie-btn"
            onClick={openSelfieCamera}
          >
            üì∏ –°–¥–µ–ª–∞—Ç—å —Å–µ–ª—Ñ–∏
          </button>
        </div>
      )}

      {/* –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞–º–µ—Ä—ã */}
      {isCameraOpen && (
        <div className="camera-interface">
          {/* –í–∏–¥–µ–æ —Å –∫–∞–º–µ—Ä—ã */}
          <video
            ref={videoRef}
            autoPlay
            playsInline
            muted
            className="camera-video"
          />
          
          {/* –ö–Ω–æ–ø–∫–∞ —Å—ä–µ–º–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–æ—Ç–æ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ) */}
          {!capturedPhoto && (
            <div className="camera-controls">
              <button 
                className="capture-btn"
                onClick={takePhoto}
              >
                <div className="capture-circle"></div>
              </button>
              
              <button 
                className="close-camera-btn"
                onClick={closeCamera}
              >
                ‚úï
              </button>
            </div>
          )}

          {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Å—ä–µ–º–∫–∏ */}
          {capturedPhoto && (
            <div className="photo-preview-overlay">
              <img 
                src={capturedPhoto} 
                alt="–í–∞—à–µ —Å–µ–ª—Ñ–∏" 
                className="preview-image"
              />
              
              <div className="photo-actions">
                <button className="save-btn" onClick={savePhoto}>
                  ‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
                <button className="retake-btn" onClick={retakePhoto}>
                  üîÑ –ü–µ—Ä–µ—Å–Ω—è—Ç—å
                </button>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default CameraApp;