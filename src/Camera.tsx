import React, { useState, useRef, useEffect } from 'react';

interface CameraComponentProps {
  onPhotoTaken?: (photoData: string) => void;
  className?: string;
}

const CameraComponent: React.FC<CameraComponentProps> = ({ 
  onPhotoTaken, 
  className 
}) => {
  const [isCameraOpen, setIsCameraOpen] = useState<boolean>(false);
  const [stream, setStream] = useState<MediaStream | null>(null);
  const [capturedPhoto, setCapturedPhoto] = useState<string | null>(null);
  const [error, setError] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stream –≤ video –∫–æ–≥–¥–∞ –æ–±–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
  useEffect(() => {
    if (videoRef.current && stream) {
      videoRef.current.srcObject = stream;
    }
  }, [stream, isCameraOpen]);

  const openCamera = async (): Promise<void> => {
    try {
      setError('');
      setIsLoading(true);
      
      const newStream = await navigator.mediaDevices.getUserMedia({ 
        video: { 
          facingMode: 'user',
          width: { ideal: 1280 },
          height: { ideal: 720 }
        } as MediaTrackConstraints
      });
      
      setStream(newStream);
      setIsCameraOpen(true);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–º–µ—Ä—ã:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.');
    } finally {
      setIsLoading(false);
    }
  };

  const closeCamera = (): void => {
    if (stream) {
      stream.getTracks().forEach(track => track.stop());
      setStream(null);
    }
    setIsCameraOpen(false);
    setCapturedPhoto(null);
  };

  const takePhoto = (): void => {
    if (!videoRef.current || !stream || !videoRef.current.videoWidth) {
      setError('–ö–∞–º–µ—Ä–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞');
      return;
    }

    try {
      const video = videoRef.current;
      
      // –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è —Ñ–æ—Ç–æ
      const canvas = document.createElement('canvas');
      const context = canvas.getContext('2d');
      
      if (!context) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç canvas');
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      
      // –ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–µ–ª—Ñ–∏
      context.translate(canvas.width, 0);
      context.scale(-1, 1);
      
      // –†–∏—Å—É–µ–º –∫–∞–¥—Ä –≤–∏–¥–µ–æ –Ω–∞ canvas
      context.drawImage(video, 0, 0, canvas.width, canvas.height);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Data URL
      const photoDataUrl = canvas.toDataURL('image/png');
      setCapturedPhoto(photoDataUrl);
      
      // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
      if (onPhotoTaken) {
        onPhotoTaken(photoDataUrl);
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ç–æ:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ç–æ');
    }
  };

  const downloadPhoto = (): void => {
    if (!capturedPhoto) return;
    
    const link = document.createElement('a');
    link.href = capturedPhoto;
    link.download = `selfie-${new Date().getTime()}.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const retakePhoto = (): void => {
    setCapturedPhoto(null);
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–º–µ—Ä—ã
  const isCameraSupported = (): boolean => {
    return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia);
  };

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      if (stream) {
        stream.getTracks().forEach(track => track.stop());
      }
    };
  }, [stream]);

  if (!isCameraSupported()) {
    return (
      <div className={className} style={{ padding: '20px', textAlign: 'center' }}>
        <p style={{ color: 'red' }}>–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ</p>
      </div>
    );
  }

  return (
    <div className={className} style={{ padding: '20px', textAlign: 'center' }}>
      {/* –í–∏–¥–µ–æ —Å –∫–∞–º–µ—Ä—ã */}
      {isCameraOpen && (
        <video
          ref={videoRef}
          autoPlay
          playsInline
          muted
          style={{
            width: '100%',
            maxWidth: '400px',
            border: '2px solid #007bff',
            borderRadius: '8px',
            display: capturedPhoto ? 'none' : 'block',
            transform: 'scaleX(-1)' // –í–∏–¥–∏–º–æ–µ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          }}
        />
      )}
      
      {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–¥–µ–ª–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ */}
      {capturedPhoto && (
        <div>
          <img
            src={capturedPhoto}
            alt="–°–µ–ª—Ñ–∏"
            style={{
              width: '100%',
              maxWidth: '400px',
              border: '2px solid #28a745',
              borderRadius: '8px'
            }}
          />
          <div style={{ marginTop: '10px' }}>
            <button
              onClick={downloadPhoto}
              style={buttonStyle('#28a745')}
            >
              üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
            <button
              onClick={retakePhoto}
              style={buttonStyle('#ffc107')}
            >
              üîÑ –ü–µ—Ä–µ—Å–Ω—è—Ç—å
            </button>
            <button
              onClick={closeCamera}
              style={buttonStyle('#dc3545')}
            >
              ‚ùå –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        </div>
      )}
      
      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      {!isCameraOpen ? (
        <button
          onClick={openCamera}
          disabled={isLoading}
          style={{
            ...buttonStyle(isLoading ? '#ccc' : '#007bff'),
            opacity: isLoading ? 0.7 : 1
          }}
        >
          {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : 'üì∑ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É'}
        </button>
      ) : (
        !capturedPhoto && (
          <div style={{ marginTop: '10px' }}>
            <button
              onClick={takePhoto}
              style={buttonStyle('#28a745')}
            >
              üì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ
            </button>
            <button
              onClick={closeCamera}
              style={buttonStyle('#dc3545')}
            >
              ‚ùå –ó–∞–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É
            </button>
          </div>
        )
      )}
      
      {error && (
        <p style={{ color: 'red', marginTop: '10px' }}>{error}</p>
      )}
      
      {/* –°–∫—Ä—ã—Ç—ã–π canvas –¥–ª—è —Å—Å—ã–ª–æ–∫ */}
      <canvas ref={canvasRef} style={{ display: 'none' }} />
    </div>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∏–ª–µ–π –∫–Ω–æ–ø–æ–∫
const buttonStyle = (backgroundColor: string): React.CSSProperties => ({
  padding: '10px 20px',
  margin: '5px',
  backgroundColor,
  color: backgroundColor === '#ffc107' ? 'black' : 'white',
  border: 'none',
  borderRadius: '5px',
  cursor: 'pointer',
  fontSize: '14px',
  fontWeight: '500'
});

export default CameraComponent;